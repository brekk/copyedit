import Array from "Array"
import ByteArray from "ByteArray"
import { Just, Nothing } from "Maybe"

import { report } from "Study"

import {
  DEFAULT_CONFIG,
  dict,
  distance,
  distanceDict,
  editTable,
  nearest,
  nearestAll,
  nearestAllWithConfig,
  nearestWithConfig,
} from "@/CopyEdit"



report(
  editTable(DEFAULT_CONFIG, "madlib"),
  "editTable(madlib)",
  [
    #[
      "javascript",
      Array.fromList([
        ByteArray.fromList([0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b, 7_b, 8_b, 9_b, 10_b]),
        ByteArray.fromList([1_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b, 7_b, 8_b, 9_b, 10_b]),
        ByteArray.fromList([2_b, 2_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b, 7_b, 8_b, 9_b]),
        ByteArray.fromList([3_b, 3_b, 2_b, 2_b, 3_b, 4_b, 5_b, 6_b, 7_b, 8_b, 9_b]),
        ByteArray.fromList([4_b, 4_b, 3_b, 3_b, 3_b, 4_b, 5_b, 6_b, 7_b, 8_b, 9_b]),
        ByteArray.fromList([5_b, 5_b, 4_b, 4_b, 4_b, 4_b, 5_b, 6_b, 6_b, 7_b, 8_b]),
        ByteArray.fromList([6_b, 6_b, 5_b, 5_b, 5_b, 5_b, 5_b, 6_b, 7_b, 7_b, 8_b]),
      ]),
    ],
    #["", Array.fromList([ByteArray.fromList([6_b])])],
  ],
)

report(
  editTable(DEFAULT_CONFIG, ""),
  "editTable('')",
  [#["madlib", Array.fromList([ByteArray.fromList([6_b])])]],
)

report(
  editTable(
    { useDamerau: false, weights: { substitute: 1_b, insert: 1_b, delete: 1_b } },
    "aamadlib",
  ),
  "editTable('') -- no damerau",
  [
    #[
      "madlib",
      Array.fromList([
        ByteArray.fromList([0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b]),
        ByteArray.fromList([1_b, 1_b, 1_b, 2_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([2_b, 2_b, 1_b, 2_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([3_b, 2_b, 2_b, 2_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([4_b, 3_b, 2_b, 3_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([5_b, 4_b, 3_b, 2_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([6_b, 5_b, 4_b, 3_b, 2_b, 3_b, 4_b]),
        ByteArray.fromList([7_b, 6_b, 5_b, 4_b, 3_b, 2_b, 3_b]),
        ByteArray.fromList([8_b, 7_b, 6_b, 5_b, 4_b, 3_b, 2_b]),
      ]),
    ],
  ],
)

report(
  editTable(DEFAULT_CONFIG, "monster"),
  "editTable - transposition",
  [
    #[
      "omnster",
      Array.fromList([
        ByteArray.fromList([0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b, 7_b]),
        ByteArray.fromList([1_b, 1_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b]),
        ByteArray.fromList([2_b, 1_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b]),
        ByteArray.fromList([3_b, 2_b, 2_b, 1_b, 2_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([4_b, 3_b, 3_b, 2_b, 1_b, 2_b, 3_b, 4_b]),
        ByteArray.fromList([5_b, 4_b, 4_b, 3_b, 2_b, 1_b, 2_b, 3_b]),
        ByteArray.fromList([6_b, 5_b, 5_b, 4_b, 3_b, 2_b, 1_b, 2_b]),
        ByteArray.fromList([7_b, 6_b, 6_b, 5_b, 4_b, 3_b, 2_b, 1_b]),
      ]),
    ],
    #[
      "montser",
      Array.fromList([
        ByteArray.fromList([0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b, 7_b]),
        ByteArray.fromList([1_b, 0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b]),
        ByteArray.fromList([2_b, 1_b, 0_b, 1_b, 2_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([3_b, 2_b, 1_b, 0_b, 1_b, 2_b, 3_b, 4_b]),
        ByteArray.fromList([4_b, 3_b, 2_b, 1_b, 1_b, 1_b, 2_b, 3_b]),
        ByteArray.fromList([5_b, 4_b, 3_b, 2_b, 1_b, 1_b, 2_b, 3_b]),
        ByteArray.fromList([6_b, 5_b, 4_b, 3_b, 2_b, 2_b, 1_b, 2_b]),
        ByteArray.fromList([7_b, 6_b, 5_b, 4_b, 3_b, 3_b, 2_b, 1_b]),
      ]),
    ],
    #[
      "monstee",
      Array.fromList([
        ByteArray.fromList([0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b, 7_b]),
        ByteArray.fromList([1_b, 0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b]),
        ByteArray.fromList([2_b, 1_b, 0_b, 1_b, 2_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([3_b, 2_b, 1_b, 0_b, 1_b, 2_b, 3_b, 4_b]),
        ByteArray.fromList([4_b, 3_b, 2_b, 1_b, 0_b, 1_b, 2_b, 3_b]),
        ByteArray.fromList([5_b, 4_b, 3_b, 2_b, 1_b, 0_b, 1_b, 2_b]),
        ByteArray.fromList([6_b, 5_b, 4_b, 3_b, 2_b, 1_b, 0_b, 1_b]),
        ByteArray.fromList([7_b, 6_b, 5_b, 4_b, 3_b, 2_b, 1_b, 1_b]),
      ]),
    ],
    #[
      "monste",
      Array.fromList([
        ByteArray.fromList([0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b]),
        ByteArray.fromList([1_b, 0_b, 1_b, 2_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([2_b, 1_b, 0_b, 1_b, 2_b, 3_b, 4_b]),
        ByteArray.fromList([3_b, 2_b, 1_b, 0_b, 1_b, 2_b, 3_b]),
        ByteArray.fromList([4_b, 3_b, 2_b, 1_b, 0_b, 1_b, 2_b]),
        ByteArray.fromList([5_b, 4_b, 3_b, 2_b, 1_b, 0_b, 1_b]),
        ByteArray.fromList([6_b, 5_b, 4_b, 3_b, 2_b, 1_b, 0_b]),
        ByteArray.fromList([7_b, 6_b, 5_b, 4_b, 3_b, 2_b, 1_b]),
      ]),
    ],
    #[
      "monstera",
      Array.fromList([
        ByteArray.fromList([0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b, 7_b, 8_b]),
        ByteArray.fromList([1_b, 0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b, 7_b]),
        ByteArray.fromList([2_b, 1_b, 0_b, 1_b, 2_b, 3_b, 4_b, 5_b, 6_b]),
        ByteArray.fromList([3_b, 2_b, 1_b, 0_b, 1_b, 2_b, 3_b, 4_b, 5_b]),
        ByteArray.fromList([4_b, 3_b, 2_b, 1_b, 0_b, 1_b, 2_b, 3_b, 4_b]),
        ByteArray.fromList([5_b, 4_b, 3_b, 2_b, 1_b, 0_b, 1_b, 2_b, 3_b]),
        ByteArray.fromList([6_b, 5_b, 4_b, 3_b, 2_b, 1_b, 0_b, 1_b, 2_b]),
        ByteArray.fromList([7_b, 6_b, 5_b, 4_b, 3_b, 2_b, 1_b, 0_b, 1_b]),
      ]),
    ],
  ],
)

report(
  distance("madlib"),
  "distance",
  [#["adlib", 1_b], #["madlib!", 1_b], #["maldib", 1_b], #["mua'dib", 3_b], #["aamadlib", 2_b]],
)

dictTest = report(
  $,
  "distanceDict",
  [
    #[
      ["brush", "crush", "shush", "hush", "mush", "rust", "hunch"],
      {{ 1_b: ["hunch"], 3_b: ["brush", "hush", "mush"], 4_b: ["crush", "shush", "rust"] }},
    ],
  ],
)
dictTest(distanceDict(DEFAULT_CONFIG, "bunch"))
dictTest(dict("bunch"))

nearestAllTest = report(
  $,
  "nearestAll",
  [#[["brush", "crush", "shush", "hush", "mush", "rust", "hunch"], Just(["hunch"])]],
)
nearestAllTest(nearestAllWithConfig(DEFAULT_CONFIG, "bunch"))

nearestAllTest(nearestAll("bunch"))

nearestTest = report(
  $,
  "nearest",
  [#[["brush", "crush", "shush", "hush", "mush", "rust", "hunch"], Just("hunch")]],
)


nearestTest(nearestWithConfig(DEFAULT_CONFIG, "bunch"))
nearestTest(nearest("bunch"))
